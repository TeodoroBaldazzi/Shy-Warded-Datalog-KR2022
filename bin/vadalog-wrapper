#!/usr/bin/env python3
import json
import logging
import pprint
from pathlib import Path
from typing import List

import requests
from requests import JSONDecodeError
from urllib3.util import Url, parse_url

from benchmark.tools.vadalog import DEFAULT_VADALOG_URL, Bind, parse_bind_type
from benchmark.utils.base import configure_logging, get_argparser


def build_bind_string(binds: List[Bind]) -> str:
    input_statements = set(bind.to_input_statement() for bind in binds)
    bind_statements = set(bind.to_vadalog_statement() for bind in binds)
    return "\n".join(sorted(input_statements) + sorted(bind_statements))


def check_vadalog_server_is_healthy(url: Url):
    """Check the Vadalog server is up and running."""
    try:
        response = requests.get(str(url))
        response.json()
        return
    except (requests.ConnectionError, JSONDecodeError):
        raise RuntimeError("Vadalog engine does not respond")


def main():
    parser = get_argparser("Wrapper for the Vadalog engine.", use_dataset=False)
    parser.add_argument("-b", "--bind", dest="binds", type=parse_bind_type, nargs="*", default=[])
    parser.add_argument("-u", "--url", dest="url", type=parse_url, default=DEFAULT_VADALOG_URL)

    configure_logging()
    args = parser.parse_args()

    check_vadalog_server_is_healthy(args.url)

    program = args.program_path
    binds = args.binds
    evaluate_url = f"{args.url}/evaluate"

    new_program = program.read_text() + "\n" + build_bind_string(binds)
    if args.working_dir:
        (Path(args.working_dir) / "new_program.vada").write_text(new_program)
    params = dict(program=new_program)
    response = requests.post(evaluate_url, data=params)

    try:
        json_response = response.json()
        if "status" in json_response and json_response["status"] != 200:
            raise RuntimeError(f"Status is not correct: {pprint.pformat(json_response)}")
        print(json.dumps(json_response))
    except json.JSONDecodeError as e:
        raise RuntimeError(f"Cannot parse JSON response {e}.\nResponse: {response}")


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        logging.error("Interrupted!")
        exit(1)
    except RuntimeError as e:
        logging.error(f"an error occurred: {e}")
        exit(1)
